#!/usr/bin/python3

#   This program is intended to convert the roughness maps generated by the main program into a format that can be used by Unity.
#   Unity uses a format in wich the metalicity of a texture is stored in the red channel and the smoothness map (inverted roughness map)
#   is stored on the alpha channel.

import numpy as np
import imageio
import pathlib
import sys
import time

import image_utility as util

def main():

    print("\033[1;37;40m- Enter the filename:\033[0;37;40m")
    
    # Gets the filename .
    filename = str(input()).rstrip()

    # Gets the path to the image.
    image_path = pathlib.Path('./{}'.format(filename))

    print("\033[0;33;40m# Opening image...")

    # Verifies if the path provided leads to a valid file.
    if not image_path.exists() or not image_path.is_file():
        print("\033[1;31;40m\tInput image doesn't exist!\033[0;37;40m")
        sys.exit(-1)

    # Opens the image.
    image = imageio.imread(image_path)

    print("\033[1;32;40m\tImage opened succesfully!")

    # Gets the user parameters for the map generation.

    # Receives how metallic should the texture be.
    print("\033[1;37;40m- Enter how metallic is your texture (0.0 - 1.0):\033[0;37;40m")
    metal = float(input())

    # Gives an error if an invalid img_height was passed.
    if metal < 0 or metal > 1:
        print("\033[1;31;40m\tInvalid mettalic value! (Must be between 0.0 and 1.0 but was {})\033[0;37;40m".format(metal))
        sys.exit(-1)

    metal = int(metal * 255)

    # Stores the start time of the program.
    start_t_total = time.time()

    print("\033[0;33;40m# Converting...")

    # Stores the start time of the operation.
    start_t = time.time()

    # Convert the image to a format that can be used in Unity engine.
    shp = (image.shape[0], image.shape[1], 4)
    out_image = np.zeros(shp, dtype = int)

    out_image[:,:,0] = metal
    out_image[:,:,1] = 1
    out_image[:,:,2] = 0
    out_image[:,:,3] = 1 - image[:,:]

    # Measures the maount of time spent.
    end_t = time.time()

    print("\033[1;32;40m\tDONE! (Time spent: {:.2f})".format(end_t - start_t))

    print("\033[0;33;40m# Saving generated image...")

    # Stores the start time of the operation.
    start_t = time.time()

    # Gets the name of the to be used for the output image (removes the extension at the end).
    outname = filename.split('.')[0]

     # Saves the output image.
    imageio.imwrite("{}_unity.png".format(outname), out_image.astype(np.uint8), compress_level = 5)
    
    # Measures the amount of time spent.
    end_t = time.time()

    print("\033[1;32;40m\tDONE! (Time spent: {:.2f})".format(end_t - start_t))

    # Measures the amount of time spent on the entire program.
    end_t_total = time.time()
    print("\033[1;32;40mDONE! (Time spent: {:.2f})\033[0;37;40m".format(end_t_total - start_t_total));

main()
